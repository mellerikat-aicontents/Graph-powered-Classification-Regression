## load data from external_path
name: Graph Classification/Regression # GCR 2.1.0
version: v2.1.0 # Supported from ALO 2.2.1 and 2.3.0

external_path:
    - load_train_data_path: ./solution/sample_data/train
    - load_inference_data_path: ./solution/sample_data/test
    - save_train_artifacts_path:
    - save_inference_artifacts_path:
    - load_model_path: 

external_path_permission:
    - aws_key_profile:
 
## Parameter setting for experiment 
## 
user_parameters:
    - train_pipeline:
        - step: input
          args:
            - input_path: train            # (str)
              x_columns:                   # (list)
              use_all_x: True              # (bool), True | False
              y_column: target             # (str) 
              drop_columns:
              encoding:                    # (str), utf-8(default) | cp949
          ui_args:
            - x_columns
            - use_all_x
            - y_column

        - step: readiness
          args:
            - x_columns:                   # (list of str)
              y_column: target             # (str)
              groupkey_columns:            # (list of str)
              center_node_column: ID       # (str)

        - step: graph
          args:       
            - 
              #dimension: 64                # (int), 64(default), dimension > 1 & even
              dimension: 32                # (int), 64(default), dimension > 1 & even
              #dimension: 16                # (int), 64(default), dimension > 1 & even
              num_epochs: 10               # (int), 10(default)
              #num_epochs: 3                # (int), 10(default)
              num_partitions:              # (int), 1(default)
              use_gpu:                     # (bool), False(default) | True
          ui_args:
            - dimension
            - num_epochs
        
        - step: train
          args:
            - task:                        # (str), classification(default) | regression
              eval_metric: f1_score        # (str), accuracy | precision | recall | f1_score (default) | rmse (regression)
              #num_hpo: 20                  # (int), 20(default)
              num_hpo: 10                  # (int), 20(default)

          ui_args:
            - task
            - eval_metric
            - num_hpo
        
        - step: output
          args:

    - inference_pipeline:
        - step: input
          args:
            - input_path: test             # (str)
              x_columns:                   # (list)
              use_all_x: True              # (bool), True | False 
              y_column: 
              drop_columns:
              encoding:  
          ui_args:
            - x_columns
            - use_all_x
            - y_column

        - step: readiness
          args:
            - x_columns:                   # (list of str)
              y_column:                    # (str)
              groupkey_columns:            # (list of str)
              center_node_column: ID       # (str)

        - step: inference
          args:
            #- global_xai: False            # (bool), True | False (default)
            - global_xai: True             # (bool), True | False (default)
              #local_xai: False             # (bool), True | False (default)
              local_xai: True              # (bool), True | False (default)
          ui_args:
            - global_xai
            - local_xai
        
        - step: output
          args:
   
## asset information       
asset_source:
    - train_pipeline:
        - step: input
          source:  ## git | local 
            code: http://mod.lge.com/hub/smartdata/ml-framework/alov2-module/input.git
            branch: tabular_2.0
            requirements:
              - pandas==1.5.3
              - torch==2.0.0
        
        - step: readiness
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/readiness.git
            branch: gcr-0.9.0
            requirements:
              - pandas==1.5.3

        - step: graph
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/gfe.git
            branch: release-2.1.0
            requirements:
              - torch==2.0.0
              - requirements.txt

        - step: train
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/gdt.git
            branch: release-1.0.0
            requirements:
              - pandas==1.5.3
              - torch==2.0.0
              - requirements.txt
        
        - step: output
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/output.git
            branch: output_dev
            requirements:
              - requirements.txt
   
    - inference_pipeline:
        - step: input
          source:  ## git | local
            # code: http://mod.lge.com/hub/smartdata/ml-framework/alov2-module/input.git
            code: local
            branch: tabular_2.0
            requirements:
              - pandas==1.5.3

        - step: readiness
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/readiness.git
            branch: gcr-0.9.0
            requirements:
              - pandas==1.5.3

        - step: inference
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/gdt.git
            branch: release-1.0.0
            requirements:
              - pandas==1.5.3
              - torch==2.0.0
              - requirements.txt
        
        - step: output
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/output.git
            #code: local
            branch: output_dev
            requirements:
              - requirements.txt
     
control:
    ## 1. 패키지 설치 및 asset 존재 여부를 실험 시마다 체크할지, 한번만 할지 결정
    ## 1-2 requirements.txt 및 종속 패키지들 한번만 설치할 지 매번 설치할지도 결정 
    - get_asset_source: once ## once, every
    # TODO 아래 get_external_data 제작하기
    #- get_external_data: every ## once, every  # Supported until ALO 2.2.1
    ## 2. 생성된 artifacts 를 backup 할지를 결정 True/False
    - backup_artifacts: True
    ## 3. pipeline 로그를 backup 할지를 결정 True/False
    - backup_log: True
    ## 4. 저장 공간 사이즈를 결정 (단위 MB)
    - backup_size: 1000
 
    ## 5. Asset 사이 데이터 전달 방법으로 memory, file 를 지원
    - interface_mode: memory

ui_args_detail:
    - train_pipeline:
        - step: input
          args:
              - name: x_columns
                description: GCR 모델링에 사용될 x columns를 ","로 구분하여 기입합니다. ex) x_column1, x_column2
                type: string
                default: ''
                range:
                  - 1
                  - 1000000
              - name: use_all_x
                description: 모든 x columns를 사용할 경우 True로, 아닐 경우 False로 설정합니다.
                type: single_selection
                default: True
                selectable:
                  - True
                  - False
              - name: y_column
                description: GCR 모델링에 사용 될 y column명을 기입합니다. ex) y_column
                type: string
                default: ''
                range:
                  - 1
                  - 1000000

        - step: graph
          args:
              - name: dimension
                description: embedding vector의 차원 수를 기입합니다. (dimension>1 & even)
                type: int
                default: 256
                range:
                  - 2
                  - 1024
              - name: num_epochs
                description: 학습 epoch 수를 기입합니다.
                type: int
                default: 10
                range:
                  - 1
                  - 30

        - step: train
          args:
              - name: task
                description: 학습 유형을 선택합니다
                type: single_selection
                default: classification
                selectable:
                  - classification
                  - regression
              - name: eval_metric
                description: GCR 학습 시 best 모델 선정 기준을 선택합니다.
                type: single_selection
                default: f1_score
                selectable:
                  - accuracy
                  - precision
                  - recall
                  - f1_score
              - name: num_hpo
                description: GCR 학습 시 HPO 횟수를 선택합니다.
                type: int
                default: 20
                range:
                  - 1
                  - 1000

    - inference_pipeline:
        - step: input
          args:
              - name: x_columns
                description: GCR 모델링에 사용될 x columns를 ","로 구분하여 기입합니다. ex) x_column1, x_column2
                type: string
                default: ''
                range:
                  - 1
                  - 1000000
              - name: use_all_x
                description: 모든 x columns를 사용할 경우 True로, 아닐 경우 False로 설정합니다.
                type: single_selection
                default: True
                selectable:
                  - True
                  - False
              - name: y_column
                description: GCR 모델링에 사용 될 y column명을 기입합니다. ex) y_column
                type: string
                default: ''
                range:
                  - 1
                  - 1000000

        - step: inference
          args:
              - name: global_xai
                description: Global Graph XAI 제공 여부를 선택합니다.
                type: single_selection
                default: False
                selectable:
                  - True
                  - False
              - name: local_xai
                description: Local Graph XAI 제공 여부를 선택합니다.
                type: single_selection
                default: False
                selectable:
                  - True
                  - False
