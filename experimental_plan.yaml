## 외부에서 데이터 가져오기 / 결과 저장하는 경우 해당 위치에 지정
external_path:
    - load_train_data_path: /nas001/users/seongwoo.kong/gcr_test_data/sample/
    - load_inference_data_path:
    - save_train_artifacts_path:
    - save_inference_artifacts_path:

external_path_permission:
    - s3_private_key_file:
 
## 실험에 필요한 파라미터를 설정함 
## - 해당 위치에서 삭제되면, code 의 default 로 실행
user_parameters:
    - train_pipeline:
        - step: input  ## 필수
          args:
            - input_path: sample
              x_columns:
              use_all_x: True
              y_column: is_married #TRAIN_LABEL" #label"
              groupkey_columns:
              drop_columns:
              time_column:
              concat_dataframes:
              encoding: # cp949

          
        - step: graph ## 필수
          args:       
            # Graph Type Settings
            - graph_type:                       # radial / relational , default: radial
              center_node_column: name              # graph_type을 radial(방사형)으로 설정한 경우, 중심 노드 컬럼 지정 필수 (미입력시 selectivity가 가장 높은 컬럼 자동 선택)            
            # User Settings
              embedding_column: name                # 임베딩 출력 컬럼 (미입력시 center_node_column과 동일)
              train_inference_column: FLAG_TRAIN_INFERENCE          # train/inference 표시 컬럼명, default: 'FLAG_TRAIN_INFERENCE'
              drop_columns: []                  # 임베딩 제외 컬럼 리스트
              dimension: 64                       # default: 256
              num_epochs: 1                      # default: 10
              workers:                          # default: 1
              num_partitions:                   # default: 1
            # Advanced Settings
              extra_columns_for_ml: []          # ML 추가 학습 column, Numerical Column만 가능
              custom_connection: []             # format[[lhs1, rhs1, rename_boolean1], [lhs2, rhs2, rename_boolean2], ...] , if rename_boolean=True -> change lhs name to rhs name


        - step: preprocess
          args:
            - handling_missing: interpolation # dropna, interpolation, fill_number
              handling_encoding_y_column: is_married #TRAIN_LABEL" # y (=label)이 categorical인 경우 설정
              handling_encoding_y: label    ## none, label, ordinal, binary, onehot, hashing
              handling_scaling_x: none  #none"         #none, standard, minmax, abs, robust
              load_train_preprocess: False   ## (inference workflow 전용) True 이면, train preprocess 를 참조하여 진행
        
        - step: sampling
          args:
            - sampling_type: none # none(실행안함) ,under(under sampling), over(over_sampilng - TBD)
              sampling_method: negative # random(random sampling), cluster(density based clustering sampling), negative(negative sampling)
              label_sampling: True # label 별 sampling 여부 선택 True, False
              ignore_label_class: # 특정 클래스에 있는 데이터 전부 사용. cat or cat,dog
              negative_target_class: # negative sampling 시 target이 되는 class
              label_sampling_num_type:  # ratio, number, compare, mingroup
              label_sampling_num: {1: 1, 0: 25}
              sampling_groupkey_columns: # groupkey 컬럼 입력. 3개 까지 지원
              sampling_num_type: # ratio, number, mingroup
              sampling_num:
        
        - step: train ## 필수
          args:
            - model_type: classification ## supproted list: classification, regression
              data_split_method: cross_validate # supproted list: cross_validate, train_test_split
              evaluation_metric: accuracy ## classification: accuracy, precision, recall, f1-score
              model_list: [lgb, rf, cb] # 알고리즘 선택(param_range를 사용할 경우, classification의 경우 rf, gbm, lgb, cb만 가능)
              num_hpo: 3 # HPO 횟수 설정, 0 인 경우 하기 설정을 무시하고 위에서 선택한 알고리즘에 대해서 default로 실행됨
              param_range: {
                rf: {max_depth: 6, n_estimators: [300, 500]},
                gbm: {max_depth: [5, 7], n_estimators: [300, 500]},
                ngb: {col_sample: [0.6, 0.8], n_estimators:[100, 300]},               
                lgb: {max_depth:[5, 9], n_estimators:[300, 500]},
                cb: {max_depth:[5, 9], n_estimators:[100, 500]},
              } # 탐색하고 싶은 parameter [min, max] 설정, 숫자만 입력할 경우 해당 parameter는 고정됨
              ## num_hpo=3, max_depth=[1, 3]인 경우 hpo 과정에서 max_depth가 1, 2, 3인 경우에 대해 실행됨.(소수점인 경우 integer로 실행)
              shap_ratio: 1
   
    - inference_pipeline:
        - step: input  ## 필수
          args:
            - input_path: inference
              x_columns: 
              use_all_x: true
              y_column: #TRAIN_LABEL" #label"
              groupkey_columns:
              drop_columns:
              time_column:
              concat_dataframes:
              encoding: # cp949 
              
        - step: preprocess
          args:
            - handling_missing: interpolation
              handling_encoding_y_column:  #TRAIN_LABEL" # y (=label)이 categorical인 경우 설정
              limit_encoding_categories: 30 # onehot이나 hashing 인코딩 등을 진행 시 컬럼이 너무 많아지는 것에 대한 한계치 설정
              load_train_preprocess: True   ## (inference workflow 전용) True 이면, train preprocess 를 참조하여 진행

        - step: inference ## 필수
          args:
            - model_type: classification

        - step: result
          args:
            - result_save_name:               # result save file name, default: inference_result.csv
   
## asset 의 설치 정보를 기록       
asset_source:
    - train_pipeline:
        - step: input
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/smartdata/ml-framework/alov2-module/input.git
            # code: local
            branch: tabular_2.0
            requirements:
              - pandas==1.5.3
        
        - step: graph
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/gfe.git
            # code: local
            branch: release-1.2
            requirements:
              - torch==2.0.0
              - requirements.txt

        - step: preprocess
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/smartdata/ml-framework/alov2-module/preprocess.git
            # code: local
            branch: release-1.2
            requirements:
              - pandas==1.5.3
              - category_encoders

        - step: sampling
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/sampling.git
            # code: local
            branch: release-1.2
            requirements:
              - requirements.txt 

        - step: train
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/tcr.git
            # code: local
            branch: tcr_v1.1.0
            requirements:
              - requirements.txt 
              - numpy==1.25.2 --force-reinstall 
   
    - inference_pipeline:
        - step: input
          source:  ## git / local 지원
           # code: http://mod.lge.com/hub/smartdata/ml-framework/alov2-module/input.git
            code: local
            branch: tabular_2.0
            requirements:
              - pandas==1.5.3

        - step: preprocess
          source:  ## git / local 지원
           # code: http://mod.lge.com/hub/smartdata/ml-framework/alov2-module/preprocess.git
            code: local
            branch: release-1.2
            requirements:
              - pandas==1.5.3

        - step: inference
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/tcr.git
            # code: local
            branch: tcr_v1.1.0
            requirements:
              - pandas==1.5.3
              
        - step: result
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/gfe.git
            branch: release-1.2
            requirements:
              - pandas==1.5.3
     
control:
    ## 1. 패키지 설치 및 asset 존재 여부를 실험 시마다 체크할지, 한번만 할지 결정
    ## 1-2 requirements.txt 및 종속 패키지들 한번만 설치할 지 매번 설치할지도 결정 
    - get_asset_source: once ## once, every
    # TODO 아래 get_external_data 제작하기
    - get_external_data: once ## once, every
    ## 2. 생성된 artifacts 를 backup 할지를 결정 True/False
    - backup_artifacts: True
    ## 3. pipeline 로그를 backup 할지를 결정 True/False
    - backup_log: True
    ## 4. 저장 공간 사이즈를 결정 (단위 MB)
    - backup_size: 1000
 
    ## 5. Asset 사이 데이터 전달 방법으로 memory, file 를 지원
    - interface_mode: memory
